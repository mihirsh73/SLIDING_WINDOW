//Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.
//1. The question translates to finding the max length of subArray with at most K 0s.
        2. Use sliding window technique.
        3. Keep count of the number of 0s found in the current window.
        4. If the count is > K, then increment l until the count goes to <=K.
        5. At each iteration find the maxLen.
        6. Time complexity: O( N ).
        class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        int countzeros=0;
        int l=0;
        int ans=0;
        for(int i=0; i<nums.size(); i++)
        {
            if(nums[i]==0) countzeros++;
            while(countzeros>k)
            {
                if(nums[l]==0) countzeros--;
                l++;
            }
            ans = max(ans,i-l+1);
        }
        return ans;
        
        
    }
};
